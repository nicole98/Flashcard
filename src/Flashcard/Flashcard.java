/*
 * Nicole Tao
 * Flashcard.java
 * This program creates flashcards
 * June 22nd, 2018
 */

package Flashcard;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
/**
 *
 * @author nitao5001
 */
public class Flashcard extends javax.swing.JFrame {
    ArrayList <String> firstSide = new ArrayList();
    ArrayList <String> secondSide = new ArrayList();
    private Timer playTimer;
    private int cardNumber;
    /**
     * Creates new form Flashcard
     */
    public Flashcard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        labelTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textFront = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textBack = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        textCard = new javax.swing.JTextArea();
        buttonNext = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        labelTerm = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonFlip = new javax.swing.JButton();
        buttonQuiz = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        buttonShuffle = new javax.swing.JButton();
        buttonPlay = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelTitle.setText("Flashcard Creator");

        jScrollPane1.setHorizontalScrollBar(null);

        textFront.setColumns(20);
        textFront.setLineWrap(true);
        textFront.setRows(5);
        jScrollPane1.setViewportView(textFront);

        jScrollPane2.setHorizontalScrollBar(null);

        textBack.setColumns(20);
        textBack.setRows(5);
        jScrollPane2.setViewportView(textBack);

        textCard.setColumns(20);
        textCard.setRows(5);
        jScrollPane3.setViewportView(textCard);

        buttonNext.setText("Next");
        buttonNext.setEnabled(false);
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        buttonBack.setText("Back");
        buttonBack.setEnabled(false);
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        labelTerm.setText("Term/Question");

        jLabel3.setText("Answer/Description");

        buttonFlip.setText("Flip");
        buttonFlip.setEnabled(false);
        buttonFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFlipActionPerformed(evt);
            }
        });

        buttonQuiz.setText("Quiz");
        buttonQuiz.setEnabled(false);
        buttonQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonQuizActionPerformed(evt);
            }
        });

        buttonShuffle.setText("Shuffle");
        buttonShuffle.setEnabled(false);
        buttonShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShuffleActionPerformed(evt);
            }
        });

        buttonPlay.setText("Play");
        buttonPlay.setEnabled(false);
        buttonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(labelTerm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(79, 79, 79))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(labelTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(buttonBack)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buttonNext)
                                        .addGap(86, 86, 86)
                                        .addComponent(buttonFlip))
                                    .addComponent(jScrollPane3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buttonQuiz)
                                        .addGap(34, 34, 34)
                                        .addComponent(buttonShuffle)
                                        .addGap(18, 18, 18)
                                        .addComponent(buttonPlay)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(167, 167, 167)
                                .addComponent(buttonAdd)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(45, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)))
                .addGap(28, 28, 28))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelTitle)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTerm)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(buttonAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonQuiz)
                    .addComponent(buttonShuffle)
                    .addComponent(buttonPlay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBack)
                    .addComponent(buttonFlip)
                    .addComponent(buttonNext))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The button will add elements to two different ArrayLists
     * @param evt 
     */
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        String front, back;
        front = textFront.getText(); //gets text entered in the text boxes
        back = textBack.getText();

        firstSide.add(front); //adds text entered from user to two seperate ArrayLists
        secondSide.add(back);
        
        textFront.setText(""); //clears text boxes
        textBack.setText("");
        
        buttonQuiz.setEnabled(true); //enabling buttons
        buttonShuffle.setEnabled(true);
        buttonPlay.setEnabled(true);
    }//GEN-LAST:event_buttonAddActionPerformed

    /**
     * This button will display the first index of the first ArrayList in the text area at the bottom
     * @param evt 
     */
    private void buttonQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonQuizActionPerformed
        textCard.setText(firstSide.get(0)); //displays the first element in the ArrayList
        buttonFlip.setEnabled(true);// enables flip button
        if ((firstSide.size() <= 1) && (secondSide.size() <= 1)){ 
            buttonNext.setEnabled(false); //If there is only 1 element, it is impossible to go back/forward, buttons remain disabled
            buttonBack.setEnabled(false);
        }
        else{
            buttonNext.setEnabled(true);//If more than 1 element in ArrayList, user can now more forward and back, buttons enabled
            buttonBack.setEnabled(true);
        }
    }//GEN-LAST:event_buttonQuizActionPerformed
    
    /**
     * This button shuffles the elements in the first ArrayList
     * @param evt 
     */
    private void buttonShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShuffleActionPerformed
        Collections.shuffle(firstSide); //Shuffles the ArrayList
        textCard.setText(firstSide.get(0)); //Displays the first element in the shuffled ArrayLIst
    }//GEN-LAST:event_buttonShuffleActionPerformed

    /**
     * This button displays the previous index of the first ArrayList
     * @param evt 
     */
    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        if (!firstSide.get(0).equals(textCard.getText())){ //checks if the text displayed equals the first element of the first ArrayList
            goBack(); //no, calls the method
        }
        else {
            if (textCard.getText().equals(firstSide.get(0))){
                textCard.setText(firstSide.get(firstSide.size()-1)); //yes, goes to the last elements of the ArrayList
            }
        }     
    }//GEN-LAST:event_buttonBackActionPerformed

    /**
     * This button displays the next index of the first ArrayList
     * @param evt 
     */
    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        if (!firstSide.get(firstSide.size()-1).equals(textCard.getText())){ //checks if the text displayed equals the first element of the first ArrayList
            textCard.setText("" + moveForward()); //no, display new text
        }
        else {
            if (textCard.getText().equals(firstSide.get(firstSide.size()-1))){
                textCard.setText(firstSide.get(0)); //yes, goes back to the beginning of the ArrayLIst
            }
        }
    }//GEN-LAST:event_buttonNextActionPerformed

    /**
     * This button display the other side of the flash card created
     * @param evt 
     */
    private void buttonFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFlipActionPerformed
        int index, ind;
        index = Collections.binarySearch(firstSide, textCard.getText()); //searches the first ArrayList for what is displayed
        if (index > -1){ //if first ArrayList does contain the text displayed
            ind = firstSide.indexOf(textCard.getText());
            textCard.setText(secondSide.get(ind)); //display the second ArrayList at the corresponding index
        }
        else{
            ind = secondSide.indexOf(textCard.getText()); //second Array contains the text that is displayed
            textCard.setText(firstSide.get(ind)); //display the first ArrayList at the corresponding index
        }
//      
    }//GEN-LAST:event_buttonFlipActionPerformed

    /**
     * This button will display all the elements in the first ArrayList; each element is displayed for 3 seconds
     * @param evt 
     */
    private void buttonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayActionPerformed
        cardNumber = 0; //starts with the first card
        playTimer= new Timer(3000, new ActionListener(){ //timer, every 3 seconds a new card will be displayed
            public void actionPerformed(ActionEvent e) {
                textCard.setText(firstSide.get(cardNumber));
                cardNumber = cardNumber + 1; //moves on to the next card
                
                if (cardNumber == firstSide.size()-1){
                    playTimer.stop(); //stop at the last index
                }  
            }   
        });
        playTimer.start(); //start the timer
    }//GEN-LAST:event_buttonPlayActionPerformed

    /**
     * This will allow the user to exit the program
     * @param evt 
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    /**
     * Goes back a card/an index
     * pre:  method is called, there are items in the ArrayList
     * post: Goes to the previous index and displays the previous card
     */
    private void goBack(){
        int index, ind;
        index = Collections.binarySearch(firstSide, textCard.getText()); //checks to see if text displayed is in the first ArrayList
        if (index > -1){ //yes it is
                ind = firstSide.indexOf(textCard.getText());//finds index that the displayed text is at in the ArrayList
                textCard.setText(firstSide.get(ind - 1)); //Displays the first side of the previous card
            }
            else{ //part of the second ArrayList, not the first
                ind = secondSide.indexOf(textCard.getText()); //finds index that the displayed text is at in the ArrayList
                textCard.setText(firstSide.get(ind - 1)); //Displays the first side of the previous card
            }    
    }
    
    /**
    * Goes to the next card/index
    * pre:  method is called, there are items in the ArrayList
    * post: returns the new text to be displayed
    * @return
    */
    private String moveForward(){
        int index, ind;
        String text;
        index = Collections.binarySearch(firstSide, textCard.getText()); //checks to see if text displayed is in the first ArrayList
        if (index > -1){ 
                ind = firstSide.indexOf(textCard.getText()); //if it is, find the index of the text displayed in the ArrayLIst
                text = firstSide.get(ind + 1); //goes to the next element
            }
        else{
            ind = secondSide.indexOf(textCard.getText()); //if not, finds the index of the text text displayed in the second ArrayLIst 
            text = firstSide.get(ind + 1); //goes to next element
        }
        return text;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Flashcard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Flashcard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Flashcard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Flashcard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Flashcard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonFlip;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JButton buttonQuiz;
    private javax.swing.JButton buttonShuffle;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelTerm;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JTextArea textBack;
    private javax.swing.JTextArea textCard;
    private javax.swing.JTextArea textFront;
    // End of variables declaration//GEN-END:variables
}
